Newton maxiter: 15
Maxbisection:	1e10

Base rigid

Deformable block: 
Youngsmodulus	= 0.05
Poisson		= 0.3

Contact Stiffness: kn = 1e3



    def BFGS_plastic_diego(self,FUNJAC, u0, tol = 1e-10, tol2 = 1e-13, free_ind = None,ti = None,simm_time = None):
        Ns,Nt = self.transform_2d


        # alpha_init = 0.01
        alpha_init = 1
        c_par2 = 0.9

        if free_ind is None:
            free_ind = self.free

        from joblib import Memory
        cache_dir = './cache_directory'
        memory = Memory(cache_dir, verbose=0)



        memory.cache
        def func(alpha,FUNJAC,u,free_ind,h_new,inBrent=False):
            ux = u.copy()
            ux[free_ind] = u[free_ind] + alpha*h_new
            f , _ = FUNJAC(ux)
            f_3 = f[free_ind]
            f3 = h_new@f_3
            # print("\talpha:",alpha,"\tf:",f3)
            if inBrent:
                if abs(f3)<tol2 and (np.dot(h_new, f_3) >= c_par2 * np.dot(h_new, f_new)):
                    return 0.0,f_3, ux

            return f3, f_3, ux



        
        nfr = len(free_ind)

        f , m_new = FUNJAC(u0)

        u = u0.copy()
        f_2 = f[free_ind]
        m_new = norm(f_2)
        self.write_m_and_f(m_new,norm(f),0)
        K_new_inv = np.eye(nfr)
        f_new = np.zeros(nfr)
        m0 = 0

        
        for ctct in self.contacts:
            ctct.patch_changes = []

        iter = 0
        while np.linalg.norm(f_2 - f_new) > 0 and np.linalg.norm(f_2) > tol:
            self.COUNTS[4] += 1


            iter += 1
            print("ITER:",iter)
            f_old = f_new.copy()
            f_new = f_2.copy()
            K_old_inv = K_new_inv.copy()
            delta_f = f_new - f_old

            if iter == 1:
                h_new = -np.dot(K_old_inv, f_new)
            else:
                K_new_inv = K_old_inv + ((np.inner(delta_u, delta_f) + np.inner(delta_f, np.dot(K_old_inv, delta_f)))*(np.outer(delta_u,delta_u)))/ (np.dot(delta_u, delta_f) ** 2)- (np.outer(np.dot(K_old_inv, delta_f),delta_u) + np.inner(np.outer(delta_u, delta_f),K_old_inv)) / np.dot(delta_u, delta_f)
                h_new = -np.dot(K_new_inv, f_new)

           
            if not np.isfinite(norm(h_new)):
                set_trace()

            m_new = abs(h_new@f_new)
            # m_new = norm(f_new)




            # Plotting lineseach...
            if iter == -1:

                n_points = 100

                # ALPHAS = np.linspace(0.0, 10*alpha_init, n_points)
                ALPHAS = np.linspace(0.0, 300, n_points)
                MMs = np.zeros(n_points)
                HF = np.zeros(n_points)
                FF = np.zeros(n_points)
                ARM = np.zeros(n_points)
                CURV = np.zeros(n_points)
                
                for ai,alphai in enumerate(ALPHAS):
                    ui = u.copy()
                    ui[free_ind] = u[free_ind] + alphai * h_new
                    # print("BEFORE:\tDEP_cum:", norm(self.bodies[0].DELTA_EPcum),"\tFPtemp:",norm(self.bodies[0].FPtemp),"\talpha_i:",alphai)
                    f_full , mi = FUNJAC(ui)
                    # print("AFTER :\tDEP_cum:", norm(self.bodies[0].DELTA_EPcum),"\tFPtemp:",norm(self.bodies[0].FPtemp))

                    fi = f_full[free_ind]

                    MMs[ai] = mi
                    HF[ai] = h_new@fi
                    FF[ai] = norm(fi)
                    # ARM[ai] = m_new + c_par*alphai*np.dot(h_new, f_new)
                    # CURV[ai] = np.dot(h_new, fi) >= c_par2 * np.dot(h_new, f_new)
                    
                import matplotlib.pyplot as plt
                fig = plt.figure()
                ax = fig.add_subplot(111)

                fig2 = plt.figure()
                ax2 = fig2.add_subplot(111)

                ax2.plot(ALPHAS,MMs,color = "blue",label="m")
                ax.plot(ALPHAS,HF,color = "green",label="h'f")
                # ax.plot(ALPHAS,FF,color = "yellow",label="|f|")
                # ax.plot(ALPHAS,ARM,color = "black",label="Armijo")
                plt.legend()
                plt.show()




            a1 = 0
            f1 = h_new@f_new

            tol2 = abs(f1)/100

            a2 = 2*alpha_init
            f2 = np.nan
            while np.isnan(f2):
                a2 /= 2
                f2,f_2,ux = func(a2,FUNJAC,u,free_ind,h_new)

            ready_for_brent = f2>0
            min_found = abs(f2)<tol2 and (np.dot(h_new, f_2) >= c_par2 * np.dot(h_new, f_new))


            print("\talphas:",[a1,a2],"\tf",[f1,f2])

            if not ready_for_brent and not min_found:

                # Compute (a valid) a3
                delta = 2*(a2-a1)
                f3 = np.nan
                while np.isnan(f3):                
                    delta /= 2
                    a3 = a2 + delta                
                    f3,f_3,ux = func(a3,FUNJAC,u,free_ind,h_new)

                print("\talphas:",[a1,a2,a3],"\tf",[f1,f2,f3])

                ready_for_brent = f3>0
                if ready_for_brent:
                    a1,f2,f_1 = a2,f2,f_2   
                    a2,f2,f_2 = a3,f3,f_3       # from here it will go directly to brent's
                min_found = abs(f3)<tol2 and (np.dot(h_new, f_3) >= c_par2 * np.dot(h_new, f_new))

                while not ready_for_brent and not min_found:
                    parab = quadratic_fit_min_zeros([[a1,f1],[a2,f2],[a3,f3]])
                    if parab["zeros"] is not None:
                        if parab["a"]>0:
                            a0 = max(parab["zeros"])
                        else:
                            a0 = min(parab["zeros"])    # >0 already guaranteed by previous while loop
                        is_alpha_pos = a0>0

                    # Make sure the parabola crosses X in ascending manner and that cross is at alpha>0.
                    while parab["zeros"] is None or not is_alpha_pos:
                        print("\tparabola not ready. Moving to right...")
                        # Let's move to the right
                        delta = 1.5*2*(a2-a1) # step 50% bigger each time and initially double cause will do at least one bisection
                        a1 = a2
                        f1 = f2

                        a2 = a3
                        f2 = f3

                        # Compute (a valid) a3
                        f3 = np.nan
                        while np.isnan(f3):                
                            delta /= 2
                            a3 = a2 + delta                
                            f3,f_3,ux = func(a3,FUNJAC,u,free_ind,h_new)

                        ready_for_brent = f3>0
                        # min_found = f3<tol2 and (np.dot(h_new, f_3) >= c_par2 * np.dot(h_new, f_new))
                        min_found = abs(f3)<tol2 and (np.dot(h_new, f_3) >= c_par2 * np.dot(h_new, f_new))
                        if ready_for_brent or min_found:
                            a1,f2,f_1 = a2,f2,f_2   
                            a2,f2,f_2 = a3,f3,f_3
                            break

                        print("\talphas:",[a1,a2,a3],"\tf",[f1,f2,f3])
                        parab = quadratic_fit_min_zeros([[a1,f1],[a2,f2],[a3,f3]])

                        if parab["zeros"] is not None:
                            if parab["a"]>0:
                                a0 = max(parab["zeros"])
                            else:
                                a0 = min(parab["zeros"])    # >0 already guaranteed by previous while loop
                            is_alpha_pos = a0>0

                    if ready_for_brent or min_found:
                        # this would mean they were found in the previous while loop
                        break

                    delta = 2*(a0-a3)
                    f0 = np.nan
                    while np.isnan(f0):
                        delta /= 2
                        a0 = a3 + delta
                        f0,f_0,ux = func(a0,FUNJAC,u,free_ind,h_new)
                    
                    ready_for_brent = f0>0
                    min_found = abs(f0)<tol2 and (np.dot(h_new, f_0) >= c_par2 * np.dot(h_new, f_new))
                    print("\talphas:",[a1,a2,a3,a0],"\tf",[f1,f2,f3,f0])

                    if min_found or ready_for_brent:
                        a1,f2,f_1 = a3,f3,f_3
                        a2,f2,f_2 = a0,f0,f_0
                        break
                    
                    a1,f1,f_1 = a2,f2,f_2
                    a2,f2,f_2 = a3,f3,f_3
                    a3,f3,f_3 = a0,f0,f_0

            
            # set_trace()

            ###########
            # Brent's #
            ###########
            secant = False
            if not min_found:
                # print("\t## Performing BRENT ##\t[a,b]: [",a1,a2,"],\t(",f1,f2,")")
                # a2 = brentq(lambda alpha:func(alpha,FUNJAC,u,free_ind,h_new,inBrent = True)[0],a1,a2,disp=True)
                # f2, f_2,ux = func(a2,FUNJAC,u,free_ind,h_new)

                print("\t## Performing quadratic bisection search ##")
                a3,f3,f_3 = a2,f2,f_2
                
                a2 = (a1+a3)/2
                f2,f_2,ux = func(a2,FUNJAC,u,free_ind,h_new)

                f0,f_0 = f1,f_1 # to enter the loop
                
                while not (abs(f0)<tol2 and (np.dot(h_new, f_0) >= c_par2 * np.dot(h_new, f_new))):
                    try:
                        parab = quadratic_fit_min_zeros([[a1,f1],[a2,f2],[a3,f3]])
                        if parab["a"]>0:
                            a0 = max(parab["zeros"])
                        else:
                            a0 = min(parab["zeros"])    # >0 already guaranteed by previous while loop

                    except:
                        secant = True
                        break
                    
                    f0,f_0,ux = func(a0,FUNJAC,u,free_ind,h_new)
                    print("\talphas:",[a1,a2,a3],[a0],"\tf",[f1,f2,f3],[f0])

                    if a0>a3:    # In this case f1,f2,f3 are all negative. since f0~0 and f is increasing in the interval
                        a1,f1,f_1 = a2,f2,f_2
                        a2,f2,f_2 = a3,f3,f_3
                        a3,f3,f_3 = a0,f0,f_0

                    elif a0>a2:      # In this case f1,f2<0,  f3>0
                        if (a3-a0)/(a2-a1)>20:
                            a3,f3,f_3 = a0,f0,f_0
                            
                        else:
                            a1,f1,f_1 = a2,f2,f_2
                            a2,f2,f_2 = a0,f0,f_0

                    elif a0>a1:      # Here f2,f3>0 but f0 could be positive and in that case it should NOT replace f1
                        if (a3-a2)/(a0-a1)>20 or f0>0:
                            a3,f3,f_3 = a2,f2,f_2
                            a2,f2,f_2 = a0,f0,f_0
                        else:
                            a1,f1,f_1 = a0,f0,f_0

                    else:
                        # It shouldn't even reach here because f1<0 and f increases
                        # set_trace()
                        a3 = a2
                        f3 = f2
                        
                        a2 = a1
                        f2 = f1

                        a1 = a0
                        f1 = f0

                if secant:
                    print("\t## parabola failed. Finishing off with Secant method ##")
                    print("\tInitially, we have:")
                    print("\t\talphas:",[a1,a2,a3],[a0],"\tf",[f1,f2,f3],[f0])

                    icr_sec = 0

                    while not (abs(f2)<tol2 and (np.dot(h_new, f_2) >= c_par2 * np.dot(h_new, f_new))):
                        if f2>0:
                            a3,f3,f_3 = a2,f2,f_2.copy()
                        else:
                            a1,f1,f_1 = a2,f2,f_2.copy()

                        a2 = (a1*f3 - a3*f1)/(f3-f1)
                        f2,f_2,ux = func(a2,FUNJAC,u,free_ind,h_new)
                        print("\talphas:",[a1,a3],[a2],"\tf",[f1,f3],[f2])

                        icr_sec +=1 
                        if icr_sec>10: 
                            print("\tmachine precision reached")
                            break


                else:
                    a2,f2,f_2 = a0,f0,f_0




            # m_3 = norm(f_3)
            self.write_m_and_f(0.0,norm(f_2),iter)
                       
            delta_u = ux[free_ind] - u[free_ind]
            u = ux

            # if alpha<1:
            #     set_trace()    
            self.savefig(ti,iter,azimut=[-90, -90],elevation=[0,0],distance=[10,10],u = Ns@Nt@ux,simm_time=simm_time)


            print("\talpha:",a2,"\tf2:",f2,"\t\t|f_2|:",norm(f_2))

        return u, m0, iter , norm(f_2)


